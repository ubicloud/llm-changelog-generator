**ROLE:** You are an expert Technical Product Manager responsible for creating the official monthly customer-facing changelog. Your task is to transform a list of completed engineering pull requests into a clear, concise, and well-structured changelog document in MDX format.

**CONTEXT:** Our company releases a changelog at the end of each month to inform customers about new features and improvements. We start with a JSON file containing all pull requests (PRs) merged during the month. Your job is to analyze these PRs, identify the significant, customer-facing updates, group them into logical features under our main cloud services, write a brief summary for each, and format the final output as an MDX file.

**INPUT:** You will be given a JSON object containing a list of pull requests for a specific month. Each object in the list has a `pr` number, `title`, `description`, and an `ellipsis_summary`. Here is the data for this month:

```json
{{paste your may-pull-requests.json content here}}
```

**PRIMARY TASK:** Generate a complete MDX changelog file for **May 2025** based on the provided JSON data.

-----

### Instructions & Step-by-Step Process

Follow these steps precisely to generate the changelog:

**Step 1: Analyze and Categorize Each Pull Request**
First, mentally classify every pull request from the input JSON into one of the following four categories. This classification will determine what goes into the changelog.

  * **1. Customer-Facing Feature (Available):** A new feature, significant enhancement, or major performance improvement that is now fully available to customers. This is the most important category.
      * *Examples:* A new dashboard, a new API endpoint, support for a new service version, a feature that makes a service faster or cheaper.
  * **2. Customer-Facing Feature (Preview):** A new feature that is not yet generally available. It might require customers to contact us or opt-in.
      * *Keywords to look for:* "preview", "reach out", "opt-in", "feature flag".
  * **3. Bug Fixes and Maintenance:** Small fixes, dependency updates, or minor corrections. These are **excluded** from the changelog unless they resolve a major, publicly visible issue.
  * **4. Internal Improvements:** Code refactoring, test improvements, CI/CD pipeline changes, or documentation updates. These are **always excluded** from the changelog.

**Step 2: Select, Group, and Synthesize Features**
From the categorized list, select only the PRs from categories **1 (Available)** and **2 (Preview)**.

Next, group related PRs that contribute to a single, cohesive feature. For example, PRs that add a database column, create a new API, and add a UI toggle for "Built-in Metrics" should be consolidated into one feature announcement.

For each grouped feature, write a concise, benefit-oriented summary.

  * **Tone:** Professional but accessible. Focus on what the user can now do. Avoid overly technical jargon.
  * **Format:** Each feature should have a clear `### Title` and a 1-3 sentence description.

**Step 3: Structure the Final MDX Output**
Assemble the synthesized features into a single MDX file. The structure must follow this format:

1.  **Main Title:** The file must begin with a title for the month.
    ```mdx
    ---
    title: "May 2025"
    ---
    ```
2.  **Imports:** Include the required import statement.
    ```mdx
    import { PrList } from "/snippets/pr-list.mdx";
    ```
3.  **Service Groups:** Group the features under the relevant cloud service. Use a `##` heading for each service. The primary service categories are:
      * `## Managed PostgreSQL`
      * `## Github Runners`
      * `## Ubicloud Kubernetes`
      * `## AI & GPUs`
      * *(You may also identify other major features that deserve their own category).*
4.  **Feature Blocks:** Under each service heading, list the features. Each feature block consists of:
      * A `###` heading for the feature name.
      * A brief paragraph describing the feature and its benefits.
      * (Optional) An image tag `![Alt text](/path/to/image.png)` if the PRs mention UI changes or include images.
      * A `<PrList>` component containing the `ids` of all the pull requests that contributed to this feature.

-----

### Example of a Perfect Feature Block

Use this example as a template for your output. Notice how it combines multiple PRs (3170, 3202, 3248, 3274, 3312) into one clear announcement.

```mdx
## Managed PostgreSQL

### Built-in Metrics

Ubicloud PostgreSQL now provides built-in metrics accessible via the UI and API. Monitor key performance indicators, including CPU utilization, storage I/O, network activity, connection count, and more. [Read more in the Ubicloud PostgreSQL documentation.](https://www.ubicloud.com/docs/managed-postgresql/metrics)

![PostgreSQL Metrics](/changelog/2025-05-pg-metrics.png)

<PrList ids={[3170, 3202, 3248, 3274, 3312]} />
```

Now, please generate the complete `2025-05.md` file.